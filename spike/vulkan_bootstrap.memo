// boot strap to use vulkan : it's running

#define VK_USE_PLATFORM_WIN32_KHR

int GraphicWindow::configureVulkan()
{
    uint32_t extensionCount = 0;
    SDL_Vulkan_GetInstanceExtensions(sdlWindow, &extensionCount, nullptr);
    std::vector<const char *> extensionNames(extensionCount);
    SDL_Vulkan_GetInstanceExtensions(sdlWindow, &extensionCount, extensionNames.data());

    std::vector<const char *> layerNames{};

    VkApplicationInfo appInfo = {
        .sType = VK_STRUCTURE_TYPE_APPLICATION_INFO,
        .pApplicationName = "Vulkan SDL tutorial",
        .applicationVersion = VK_MAKE_VERSION(1, 0, 0),
        .pEngineName = "No Engine",
        .engineVersion = VK_MAKE_VERSION(1, 0, 0),
        .apiVersion = VK_API_VERSION_1_0,
    };

    const VkInstanceCreateInfo createInfo = {
        .sType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO,
        .pApplicationInfo = &appInfo,
        .ppEnabledLayerNames = layerNames.data(),
        .enabledExtensionCount = (uint32_t)extensionNames.size(),
        .ppEnabledExtensionNames = extensionNames.data(),
    };

    VkInstance instance = VK_NULL_HANDLE;
    VkResult result = VK_ERROR_INITIALIZATION_FAILED;
    result = vkCreateInstance(&createInfo, 0, &instance);
    if (result == VK_SUCCESS)
    {
        printf("Vulkan context loaded !");
    }

    VkSurfaceKHR surface;
    if (!SDL_Vulkan_CreateSurface(sdlWindow, instance, &surface))
    {
        printf("failed to create a surface!");
    }

    return result == VK_SUCCESS;
}